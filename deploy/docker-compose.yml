services:
  dashboard:
    build:
      context: ../
      dockerfile: apps/dashboard/Dockerfile
    container_name: dashboard
    ports:
      - "5550:5550"
    restart: unless-stopped
    env_file:
      - ../shared/config/.env
    environment:
      - DASHBOARD_USER=admin
      - DASHBOARD_PASS=fredrules
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=production
    volumes:
      - /Users/yancyshepherd/MEGA/PythonProjects/YANCY/shared/ssl:/app/ssl:ro
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:5550/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  cruise-price-check:
    build:
      context: ../apps/cruise-price-check
      dockerfile: Dockerfile
    container_name: cruise-price-check
    ports:
      - "5551:5551"
    restart: unless-stopped
    env_file:
      - ../shared/config/.env
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=production
      - DISPLAY=:99
      - CHROME_BIN=/usr/bin/google-chrome
      - CHROME_PATH=/usr/bin/google-chrome
    volumes:
      - /Users/yancyshepherd/MEGA/PythonProjects/YANCY/shared/ssl:/app/ssl:ro
      - ../apps/cruise-price-check/cruise_config.json:/app/cruise_config.json:ro
      - cruise_data:/app/data
      - cruise_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5551/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  clan-map:
    build:
      context: ../apps/clan-map
      dockerfile: Dockerfile
    container_name: clan-map
    ports:
      - "5552:5552"
    restart: unless-stopped
    env_file:
      - ../shared/config/.env
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=production
    volumes:
      - /Users/yancyshepherd/MEGA/PythonProjects/YANCY/shared/ssl:/app/ssl:ro
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:5552/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  qsl-card-creator:
    build:
      context: ../apps/W5XY-QSL-CARD-CREATOR
      dockerfile: Dockerfile
    container_name: qsl-card-creator
    ports:
      - "5553:5553"
    restart: unless-stopped
    env_file:
      - ../shared/config/.env
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=production
    volumes:
      - ./ssl:/app/ssl:ro
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.7'
        reservations:
          memory: 256M
          cpus: '0.3'
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:5553/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  tracker:
    build:
      context: ../apps/5k-tracker
      dockerfile: Dockerfile
    container_name: tracker
    ports:
      - "5554:5554"
    restart: unless-stopped
    env_file:
      - ../shared/config/.env
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=production
    volumes:
      - ./ssl:/app/ssl:ro
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5554/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Monitoring Services (optional - only if you want local monitoring)
  # Since you have Prometheus/Grafana on server, these are for local dev
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    profiles: ["monitoring"]  # Only start with --profile monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    restart: unless-stopped
    profiles: ["monitoring"]  # Only start with --profile monitoring

volumes:
  cruise_data:
  cruise_logs:

networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500